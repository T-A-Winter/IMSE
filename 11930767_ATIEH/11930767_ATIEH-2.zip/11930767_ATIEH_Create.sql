
--------------------------------------------- App
CREATE TABLE App (
    AppID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    AppName VARCHAR(100) NOT NULL,
    Version VARCHAR(10) NOT NULL
);

--------------------------------------------- Benutzer
CREATE TABLE Benutzer (
    BenutzerID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Vorname VARCHAR(50) NOT NULL,
    Nachname VARCHAR(50) NOT NULL,
    Adresse VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE,
    PromoCode VARCHAR(20),
    Telefonnummer VARCHAR(15),
    Gebuehr NUMERIC(4, 2),
    GratisLiefern NUMBER(1) DEFAULT 0
);

--------------------------------------------- TRIGGER CheckEmailBeforeInsert

CREATE OR REPLACE TRIGGER CheckEmailBeforeInsert
    BEFORE INSERT ON Benutzer
    FOR EACH ROW
BEGIN
    IF INSTR(:NEW.Email, '@') <= 1 OR INSTR(:NEW.Email, '@') = LENGTH(:NEW.Email) THEN
        RAISE_APPLICATION_ERROR(-20001, 'E-Mail-Adresse muss ein @-Zeichen enthalten.');
    END IF;

    IF INSTR(SUBSTR(:NEW.Email, INSTR(:NEW.Email, '@') + 1), '.') = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'UngÃ¼ltige E-Mail-Adresse: Es muss ein Punkt nach dem @-Zeichen stehen.');
    END IF;

END;
/

--------------------------------------------- auto increment benutzer_id on INSERT INTO Benutzer
CREATE SEQUENCE BenutzerIDSeq
    START WITH 1
    INCREMENT BY 1
    MINVALUE 1
    NOMAXVALUE
    NOCYCLE;

CREATE OR REPLACE TRIGGER BenutzerBeforeInsert
    BEFORE INSERT ON Benutzer
    FOR EACH ROW
BEGIN
    SELECT BenutzerIDSeq.NEXTVAL INTO :new.BenutzerID FROM dual;
END;
/

--------------------------------------------- procedure Benuzter

CREATE OR REPLACE PROCEDURE p_delete_Benutzer(
    p_BenutzerID  IN  Benutzer.BenutzerID%TYPE,
    p_error_code OUT NUMBER
)
AS
BEGIN
    DELETE
    FROM Benutzer
    WHERE p_BenutzerID = Benutzer.BenutzerID;

    p_error_code := SQL%ROWCOUNT;
    IF (p_error_code = 1)
    THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS
        THEN
            p_error_code := SQLCODE;
END p_delete_Benutzer;
/

--------------------------------------------- Restaurant
CREATE TABLE Restaurant (
    RestaurantName VARCHAR(100) NOT NULL,
    Anschrift VARCHAR(255) NOT NULL,
    Oeffnungszeiten VARCHAR2(8) DEFAULT '10:00',
    Ort VARCHAR(225),
    Plz INT,
    PRIMARY KEY (Anschrift)
);

--------------------------------------------- auto increment id on INSERT INTO Resturants
CREATE OR REPLACE PROCEDURE p_avg_price_of_restaurant(
    p_RestaurantAnschrift IN Restaurant.Anschrift%TYPE,
    p_avg_price OUT NUMBER
)
AS
BEGIN
    SELECT AVG(Price) INTO p_avg_price
    FROM Gericht
    WHERE RestaurantAnschrift = p_RestaurantAnschrift;
EXCEPTION
    WHEN OTHERS THEN
        p_avg_price := -1; -- Ein Fehler-Flag setzen
END p_avg_price_of_restaurant;
/

--------------------------------------------- procedure Restaurant
CREATE OR REPLACE PROCEDURE p_delete_Restaurant(
    p_Anschrift  IN  Restaurant.Anschrift%TYPE,
    p_error_code OUT NUMBER
)
AS
BEGIN
    DELETE
    FROM Restaurant
    WHERE p_Anschrift = Restaurant.Anschrift;

    p_error_code := SQL%ROWCOUNT;
    IF (p_error_code = 1)
    THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS
        THEN
            p_error_code := SQLCODE;
END p_delete_Restaurant;
/


--------------------------------------------- Gericht
CREATE TABLE Gericht (
    GerichtID INT PRIMARY KEY,
    RestaurantAnschrift VARCHAR(100),
    GerichtName VARCHAR(255) NOT NULL,
    Price INT,
    FOREIGN KEY (RestaurantAnschrift) REFERENCES Restaurant(Anschrift) ON DELETE CASCADE
);
--------------------------------------------- auto increment id on INSERT INTO Gericht
CREATE SEQUENCE GerichtIDSeq
    START WITH 1
    INCREMENT BY 1
    MINVALUE 1
    NOMAXVALUE
    NOCYCLE;

CREATE OR REPLACE TRIGGER GerichtBeforeInsert
    BEFORE INSERT ON Gericht
    FOR EACH ROW
BEGIN
    SELECT GerichtIDSeq.NEXTVAL INTO :new.GerichtID FROM dual;
END;
/

--------------------------------------------- procedure Gericht
CREATE OR REPLACE PROCEDURE p_delete_Gericht(
    p_GerichtID  IN  Gericht.GerichtID%TYPE,
    p_error_code OUT NUMBER
)
AS
BEGIN
    DELETE
    FROM Gericht
    WHERE p_GerichtID = Gericht.GerichtID;

    p_error_code := SQL%ROWCOUNT;
    IF (p_error_code = 1)
    THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS
        THEN
            p_error_code := SQLCODE;
END p_delete_Gericht;
/

--------------------------------------------- Lieferrant
CREATE TABLE Lieferrant (
    LieferrantID INTEGER PRIMARY KEY,
    LieferrantName VARCHAR(100) NOT NULL,
    FahrzeugTyp VARCHAR(10) CHECK (FahrzeugTyp IN ('A', 'F'))
);
--------------------------------------------- auto increment id on INSERT INTO Lieferrant
CREATE SEQUENCE LieferrantIDSeq
    START WITH 1
    INCREMENT BY 1
    MINVALUE 1
    NOMAXVALUE
    NOCYCLE;

CREATE OR REPLACE TRIGGER LieferrantBeforeInsert
    BEFORE INSERT ON Lieferrant
    FOR EACH ROW
BEGIN
    SELECT LieferrantIDSeq.NEXTVAL INTO :new.LieferrantID FROM dual;
END;
/
--------------------------------------------- procedure Lieferrant
CREATE OR REPLACE PROCEDURE p_delete_lieferrant(
    p_LieferrantID  IN  Lieferrant.LieferrantID%TYPE,
    p_error_code OUT NUMBER
)
AS
BEGIN
    DELETE
    FROM Lieferrant
    WHERE p_LieferrantID = Lieferrant.LieferrantID;

    p_error_code := SQL%ROWCOUNT;
    IF (p_error_code = 1)
    THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS
        THEN
            p_error_code := SQLCODE;
END p_delete_lieferrant;
/
--------------------------------------------- Warenkorb
CREATE TABLE Warenkorb (
    WarenkorbID INT PRIMARY KEY,
    BenutzerID INT,
    ResturantAnschrift VARCHAR(255) NOT NULL,
    LiefernKosten INT,
    FOREIGN KEY (BenutzerID) REFERENCES Benutzer(BenutzerID) ON DELETE CASCADE,
    FOREIGN KEY (ResturantAnschrift) REFERENCES Restaurant(Anschrift) ON DELETE CASCADE

);

--------------------------------------------- auto increment id on INSERT INTO Warenkorb
CREATE SEQUENCE WarenkorbIDSeq
    START WITH 1
    INCREMENT BY 1
    MINVALUE 1
    NOMAXVALUE
    NOCYCLE;

CREATE OR REPLACE TRIGGER WarenkorbBeforeInsert
    BEFORE INSERT ON Warenkorb
    FOR EACH ROW
BEGIN
    SELECT WarenkorbIDSeq.NEXTVAL INTO :new.WarenkorbID FROM dual;
END;
/

--------------------------------------------- procedure Warenkorb

CREATE OR REPLACE PROCEDURE p_delete_Warenkorb(
    p_WarenkorbID  IN  Warenkorb.WarenkorbID%TYPE,
    p_error_code OUT NUMBER
)
AS
BEGIN
    DELETE
    FROM Warenkorb
    WHERE p_WarenkorbID = Warenkorb.WarenkorbID;

    p_error_code := SQL%ROWCOUNT;
    IF (p_error_code = 1)
    THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS
        THEN
            p_error_code := SQLCODE;
END p_delete_Warenkorb;
/
--------------------------------------------- OrderItem
CREATE TABLE OrderItem(
    OrderItemID INT PRIMARY KEY,
    WarenkorbID INT,
    GerichtID INT,
    Price INT,
    Quantity INT,
    TotalPriceG INT,
    FOREIGN KEY (WarenkorbID) REFERENCES Warenkorb(WarenkorbID) ON DELETE CASCADE,
    FOREIGN KEY (GerichtID) REFERENCES Gericht(GerichtID) ON DELETE CASCADE
);

--------------------------------------------- auto increment id on INSERT INTO OrderItem

CREATE SEQUENCE OrderItemIDSeq
    START WITH 1
    INCREMENT BY 1
    MINVALUE 1
    NOMAXVALUE
    NOCYCLE;

CREATE OR REPLACE TRIGGER OrderItemBeforeInsert
    BEFORE INSERT ON OrderItem
    FOR EACH ROW
BEGIN
    SELECT OrderItemIDSeq.NEXTVAL INTO :new.OrderItemID FROM dual;
END;
/

--------------------------------------------- procedure OrderItem

CREATE OR REPLACE PROCEDURE p_delete_OrderItem(
    p_OrderItemID  IN  OrderItem.OrderItemID%TYPE,
    p_error_code OUT NUMBER
)
AS
BEGIN
    DELETE
    FROM OrderItem
    WHERE p_OrderItemID = OrderItem.OrderItemID;

    p_error_code := SQL%ROWCOUNT;
    IF (p_error_code = 1)
    THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
EXCEPTION
    WHEN OTHERS
        THEN
            p_error_code := SQLCODE;
END p_delete_OrderItem;
/

---------------------------------- Kochen
CREATE TABLE Kochen(
    GerichtID INT NOT NULL,
    RestaurantAnschrift VARCHAR(100) NOT NULL,
    PRIMARY KEY(RestaurantAnschrift, GerichtID),
    FOREIGN KEY(GerichtID) REFERENCES Gericht(GerichtID),
    FOREIGN KEY(RestaurantAnschrift) REFERENCES Restaurant(Anschrift)
);
